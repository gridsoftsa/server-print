# Imagen base con PHP-FPM 8.2
FROM php:8.2-fpm

# Crear el usuario y grupo nginx
RUN addgroup --system nginx && adduser --system --ingroup nginx nginx

# Instalar dependencias de sistema y extensiones de PHP necesarias
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    git \
    curl \
    unzip \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libpq-dev \
    libicu-dev \
    && docker-php-ext-configure intl \
    && docker-php-ext-install intl pdo_mysql mbstring exif pcntl bcmath gd pdo pdo_pgsql \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Copiar configuraciones de Nginx y Supervisor
COPY .docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY .docker/nginx/default.conf /etc/nginx/conf.d/default.conf
COPY .docker/supervisor/supervisord.conf /etc/supervisor/supervisord.conf

# Establecer el directorio de trabajo
WORKDIR /var/www

# Copiar los archivos del proyecto al contenedor
COPY . .

# Copiar archivo .env desde el ejemplo y generar la clave de la aplicación
RUN cp .env.example .env

# Instalar Composer dentro del contenedor
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer
RUN composer install --no-dev --optimize-autoloader

# Generar la clave de la aplicación Laravel
RUN php artisan key:generate

# Establecer permisos adecuados para los archivos y directorios
RUN chown -R nginx:nginx /var/www \
    && chmod -R 775 /var/www/storage \
    && chmod -R 775 /var/www/storage/logs

RUN chown -R www-data:www-data /var/www/storage \
    && chmod -R 775 /var/www/storage

# Exponer puertos necesarios
EXPOSE 80 9000

# Comando por defecto para iniciar Nginx y PHP-FPM con Supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
