using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using System.Text.Json;
using System.Windows.Forms;
using System.Drawing;
using System.Configuration;

namespace GridPosPrinter
{
    public partial class MainForm : Form
    {
        private readonly HttpClient _httpClient;
        private readonly Timer _timer;
        private readonly string _apiUrl;
        private readonly string _clientSlug;
        private readonly string _authToken;
        private bool _isRunning = false;
        private readonly RichTextBox _logBox;
        private readonly Button _startButton;
        private readonly Button _stopButton;
        private readonly TextBox _urlTextBox;
        private readonly TextBox _intervalTextBox;

        public MainForm()
        {
            InitializeComponent();

            // Configuraci√≥n
            _apiUrl = ConfigurationManager.AppSettings["ApiUrl"] ?? "https://api.gridpos.co/print-queue";
            _clientSlug = ConfigurationManager.AppSettings["ClientSlug"] ?? "default";
            _authToken = ConfigurationManager.AppSettings["AuthToken"] ?? "f57225ee-7a78-4c05-aa3d-bbf1a0c4e1e3";

            // HTTP Client
            _httpClient = new HttpClient();
            _httpClient.DefaultRequestHeaders.Add("Authorization", _authToken);
            _httpClient.DefaultRequestHeaders.Add("X-Client-Slug", _clientSlug);

            // Timer para verificaci√≥n ultra r√°pida
            _timer = new Timer();
            _timer.Interval = 500; // 500ms = 0.5 segundos (ultra r√°pido)
            _timer.Tick += Timer_Tick;

            // Configurar interfaz
            SetupUI();
        }

        private void SetupUI()
        {
            this.Text = "GridPos Printer Service";
            this.Size = new Size(800, 600);
            this.StartPosition = FormStartPosition.CenterScreen;

            // Panel superior
            var topPanel = new Panel
            {
                Dock = DockStyle.Top,
                Height = 100,
                BackColor = Color.LightGray
            };

            // URL TextBox
            var urlLabel = new Label { Text = "API URL:", Location = new Point(10, 15) };
            _urlTextBox = new TextBox
            {
                Text = _apiUrl,
                Location = new Point(80, 12),
                Size = new Size(300, 23)
            };

            // Interval TextBox
            var intervalLabel = new Label { Text = "Interval (ms):", Location = new Point(400, 15) };
            _intervalTextBox = new TextBox
            {
                Text = "500",
                Location = new Point(480, 12),
                Size = new Size(80, 23)
            };

            // Buttons
            _startButton = new Button
            {
                Text = "Start Service",
                Location = new Point(580, 10),
                Size = new Size(100, 30),
                BackColor = Color.LightGreen
            };
            _startButton.Click += StartButton_Click;

            _stopButton = new Button
            {
                Text = "Stop Service",
                Location = new Point(690, 10),
                Size = new Size(100, 30),
                BackColor = Color.LightCoral,
                Enabled = false
            };
            _stopButton.Click += StopButton_Click;

            // Log Box
            _logBox = new RichTextBox
            {
                Dock = DockStyle.Fill,
                ReadOnly = true,
                BackColor = Color.Black,
                ForeColor = Color.Lime,
                Font = new Font("Consolas", 10)
            };

            // Agregar controles
            topPanel.Controls.AddRange(new Control[] { urlLabel, _urlTextBox, intervalLabel, _intervalTextBox, _startButton, _stopButton });
            this.Controls.Add(topPanel);
            this.Controls.Add(_logBox);

            // Log inicial
            WriteLog("üöÄ GridPos Printer Service iniciado");
            WriteLog($"API URL: {_apiUrl}");
            WriteLog($"Client Slug: {_clientSlug}");
        }

        private void StartButton_Click(object sender, EventArgs e)
        {
            if (!_isRunning)
            {
                _isRunning = true;
                _startButton.Enabled = false;
                _stopButton.Enabled = true;
                _timer.Start();

                WriteLog("‚úÖ Servicio iniciado");
            }
        }

        private void StopButton_Click(object sender, EventArgs e)
        {
            if (_isRunning)
            {
                _isRunning = false;
                _startButton.Enabled = true;
                _stopButton.Enabled = false;
                _timer.Stop();

                WriteLog("üõë Servicio detenido");
            }
        }

        private async void Timer_Tick(object sender, EventArgs e)
        {
            if (!_isRunning) return;

            // Actualizar intervalo din√°micamente
            if (int.TryParse(_intervalTextBox.Text, out int newInterval))
            {
                _timer.Interval = newInterval;
            }

            try
            {
                var response = await _httpClient.GetAsync(_urlTextBox.Text);

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var printJobs = JsonSerializer.Deserialize<JsonElement[]>(content);

                    if (printJobs != null && printJobs.Length > 0)
                    {
                        WriteLog($"üì® Encontrados {printJobs.Length} trabajos de impresi√≥n");

                        foreach (var job in printJobs)
                        {
                            await ProcessPrintJob(job);
                        }
                    }
                }
                else
                {
                    WriteLog($"‚ö†Ô∏è Error HTTP: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                WriteLog($"‚ùå Error: {ex.Message}");
            }
        }

        private async Task ProcessPrintJob(JsonElement job)
        {
            try
            {
                var action = job.GetProperty("action").GetString();
                var printer = job.GetProperty("printer").GetString();

                WriteLog($"üñ®Ô∏è Procesando: {action} en {printer}");

                switch (action)
                {
                    case "salePrinter":
                        await ProcessSalePrint(job);
                        break;

                    case "orderPrinter":
                        await ProcessOrderPrint(job);
                        break;

                    case "openCashDrawer":
                        await ProcessOpenCashDrawer(job);
                        break;

                    default:
                        WriteLog($"‚ö†Ô∏è Acci√≥n desconocida: {action}");
                        break;
                }

                // Eliminar trabajo de la cola
                var jobId = job.GetProperty("id").GetString();
                await DeletePrintJob(jobId);

                WriteLog($"‚úÖ Trabajo completado: {action}");
            }
            catch (Exception ex)
            {
                WriteLog($"‚ùå Error procesando trabajo: {ex.Message}");
            }
        }

        private async Task ProcessSalePrint(JsonElement job)
        {
            var printer = job.GetProperty("printer").GetString();

            if (job.TryGetProperty("image", out var imageElement))
            {
                // Modo imagen
                var image = imageElement.GetString();
                WriteLog($"üñºÔ∏è Imprimiendo imagen en {printer}");
                await PrintImage(printer, image);
            }
            else
            {
                // Modo ESC/POS
                WriteLog($"üìÑ Imprimiendo ESC/POS en {printer}");
                await PrintEscPos(job);
            }
        }

        private async Task ProcessOrderPrint(JsonElement job)
        {
            var printer = job.GetProperty("printer").GetString();
            WriteLog($"üìã Imprimiendo orden en {printer}");
            await PrintEscPos(job);
        }

        private async Task ProcessOpenCashDrawer(JsonElement job)
        {
            var printer = job.GetProperty("printer").GetString();
            WriteLog($"üí∞ Abriendo caja registradora en {printer}");
            await OpenCashDrawer(printer);
        }

        private async Task PrintImage(string printer, string imageBase64)
        {
            try
            {
                // Convertir base64 a imagen
                var imageBytes = Convert.FromBase64String(imageBase64.Replace("data:image/png;base64,", ""));

                // Guardar imagen temporal
                var tempPath = Path.GetTempFileName() + ".png";
                File.WriteAllBytes(tempPath, imageBytes);

                // Imprimir usando Windows Print Spooler
                await PrintImageFile(printer, tempPath);

                // Limpiar archivo temporal
                File.Delete(tempPath);

                WriteLog($"‚úÖ Imagen impresa en {printer}");
            }
            catch (Exception ex)
            {
                WriteLog($"‚ùå Error imprimiendo imagen: {ex.Message}");
            }
        }

        private async Task PrintEscPos(JsonElement job)
        {
            try
            {
                var printer = job.GetProperty("printer").GetString();

                // Obtener datos JSON para ESC/POS
                var dataJson = job.GetProperty("data_json");

                // Generar comandos ESC/POS
                var escPosCommands = GenerateEscPosCommands(dataJson);

                // Enviar a impresora
                await SendToPrinter(printer, escPosCommands);

                WriteLog($"‚úÖ ESC/POS enviado a {printer}");
            }
            catch (Exception ex)
            {
                WriteLog($"‚ùå Error ESC/POS: {ex.Message}");
            }
        }

        private async Task OpenCashDrawer(string printer)
        {
            try
            {
                // Comando ESC/POS para abrir caja
                var openDrawerCommand = new byte[] { 0x1B, 0x70, 0x00, 0x19, 0xFA };

                await SendToPrinter(printer, openDrawerCommand);

                WriteLog($"‚úÖ Caja abierta en {printer}");
            }
            catch (Exception ex)
            {
                WriteLog($"‚ùå Error abriendo caja: {ex.Message}");
            }
        }

        private async Task PrintImageFile(string printer, string imagePath)
        {
            // Usar Windows Print Spooler para imprimir imagen
            var printProcess = new System.Diagnostics.Process();
            printProcess.StartInfo.FileName = "mspaint.exe";
            printProcess.StartInfo.Arguments = $"/p \"{imagePath}\"";
            printProcess.StartInfo.UseShellExecute = false;
            printProcess.StartInfo.CreateNoWindow = true;

            printProcess.Start();
            await Task.Delay(2000); // Esperar que se procese
        }

        private byte[] GenerateEscPosCommands(JsonElement dataJson)
        {
            var commands = new System.Collections.Generic.List<byte>();

            // Comandos b√°sicos ESC/POS
            commands.AddRange(new byte[] { 0x1B, 0x40 }); // Initialize printer

            // Aqu√≠ agregar√≠as la l√≥gica para generar comandos ESC/POS
            // basado en los datos JSON recibidos

            return commands.ToArray();
        }

        private async Task SendToPrinter(string printer, byte[] data)
        {
            // Enviar datos directamente a la impresora
            // Esto requerir√≠a implementar comunicaci√≥n directa con la impresora
            // usando Windows API o librer√≠as espec√≠ficas

            await Task.Delay(100); // Simular env√≠o
        }

        private async Task DeletePrintJob(string jobId)
        {
            try
            {
                var deleteUrl = $"{_urlTextBox.Text}/{jobId}";
                await _httpClient.DeleteAsync(deleteUrl);
            }
            catch (Exception ex)
            {
                WriteLog($"‚ö†Ô∏è Error eliminando trabajo: {ex.Message}");
            }
        }

        private void WriteLog(string message)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new Action(() => WriteLog(message)));
                return;
            }

            var timestamp = DateTime.Now.ToString("HH:mm:ss");
            var logMessage = $"[{timestamp}] {message}\n";

            _logBox.AppendText(logMessage);
            _logBox.ScrollToCaret();

            // Tambi√©n escribir a archivo
            try
            {
                var logPath = Path.Combine(Application.StartupPath, "gridpos-printer.log");
                File.AppendAllText(logPath, logMessage);
            }
            catch
            {
                // Ignorar errores de escritura de log
            }
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            _timer?.Stop();
            _httpClient?.Dispose();
            base.OnFormClosing(e);
        }
    }

    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
